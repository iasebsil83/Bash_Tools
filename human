#!/bin/bash




# ---- declarations ----

#constants
DEFAULT_WORDS_PER_LINE=10

#actions
justify=0
disable_numbers=0
phrases=1
n_words_per_line=1




# ---- utils ----

#number ($1:number)
function printFormattedNumber() {
	echo 'rawNbr['$1']'

	#add spaces from the last character to the first
	reversed=$(echo $1 | rev)
	digit=1
	result=""
	for c in ${reversed[@]}; do
		if [[ $digit == 4 ]]; then
			digit=1
		fi

		#add space
		if [[ $digit == 3 ]]; then
			result+=" "
		fi

		#add character
		result+="$c"

		digit=$(($digit + 1))
	done

	#print result
	echo $result | rev
}




# ---- 'human' execution ----

#arguments analysis ($@:all arguments)
function human_exec() {
	file_concerned='-'
	words_per_line=$DEFAULT_WORDS_PER_LINE

	#get actions
	listening_nbr=0
	for arg in $(seq $#); do
		echo 'Analysing argument ['${@:$arg:1}']'
		case ${@:$arg:1} in

			#justify
			'-j' | '--justify')
				justify=1
				n_words_per_line=0
			;;

			#disable numbers
			'-n' | '--numbers')
				disable_numbers=0
			;;

			#big notation for numbers
			'-b' | '--big-notation')
				phrases=0
			;;

			#n words per line
			'-w' | '--words')
				justify=0
				n_words_per_line=1
			;;

			#undefined action
			-*)
				echo "human: Undefined action '${@:$arg:1}'."
				exit 1
			;;

			#filename given
			*)
				if [[ -f ${@:$arg:1} ]]; then
					file_concerned=${@:$arg:1}
					break
				else
					echo "human: No file '${@:$arg:1}' found."
					exit 1
				fi
			;;
		esac
	done

	#read file
	content=$(cat $file_concerned)

	#for each word
	wordCnt=0
	for w in $content; do
		echo -n "Word[$w] -> ["

		#line feed
		if [[ $n_words_per_line == 1 && $(($wordCnt%$words_per_line)) == 0 ]]; then
			echo
		fi

		#case 1 : number
		isnbr -n -f $w && {
			echo -n "#N# "
			if [[ $disable_numbers == 0 ]]; then
				printFormattedNumber $w
			else
				echo $w' '
			fi

		#case 2 : regular word
		} || {
			echo -n "#R# "
			echo -n $w' '
		}

		wordCnt=$(($wordCnt + 1))
		echo "]"
	done
}




# ---- main ----
case $1 in

	#action 1 : help
	'-h' | '--help')
		echo "Usage : human [action] [file]"
		echo "Converts content from raw text into human readable lines."
		echo "Also converts numbers into readable format."
		echo "If no file is given, stdin is read."
		echo
		echo "Action :"
		echo "  -b, --big-nbr     : Format big numbers using letters (K, M, G, T, P)."
		echo "  -h, --help        : Show this help message."
		echo "  -j, --justify     : Justify the output text."
		echo "  -n, --numbers     : Disable numbers formatting."
		echo "  -w, --words   <n> : Keep only #n# words per line."
		echo
		echo "WARNING : Actions 'justify' and 'words' are NOT compatible."
		echo "          The last action given will be applied."
		echo
		echo "Examples :"
		echo "  > human -w 5 -n myTextFile.txt"
		echo "  #Display the content of file 'myTextFile.txt' with 5 words per line."
		echo
		echo "  > cat someText.txt | human -n --justify"
		echo "  #Shows the content of file 'someText.txt' justified without formatting numbers."
		echo
		echo "  > echo 12345678987654321 | human --big-nbr"
		echo "  #outputs : '12P 345T 678G 987M 654K 321'"
		echo
		echo "This command is part of \"Bash Tools\"."
		echo "For more information about \"Bash Tools\", please check :"
		echo "    https://github.com/iasebsil83/Bash_Tools"
		exit 0
	;;

	#anything else
	*)
		human_exec $@
	;;
esac
