#!/bin/bash




# ---- DEFINITIONS ----
delay=0.1    #default values
separator=''




# ---- UTILS ----

#printf $separator including the case that it starts with '-' (no arguments)
function printf_separator() {
	if [[ $separator == -* ]]; then
		printf -- $separator
	elif [[ ! -z $separator ]]; then
		printf $separator
	fi
}

#return 0 or 1 randomly (no arguments)
function BIN_random() {
	if [[ $RANDOM -gt 16384 ]]; then
		echo -n 0
	else
		echo -n 1
	fi
}

#convert from decimal into hex character ($1:number between 1 and 16)
function HEX_echoAsHex() {
	n=$(($1-1))
	case $n in
		10) echo -n a ;;
		11) echo -n b ;;
		12) echo -n c ;;
		13) echo -n d ;;
		14) echo -n e ;;
		15) echo -n f ;;
		*) echo -n $n ;;
	esac
}

#try to generate a random hex number(with recursion) ($1:recursion number, $2:random number previously generated)
function HEX_checkLimit() {

	#16 steps of 1536 ~> $RANDOM range
	limit=$(($1 * 2048))

	#check limit
	if [[ $2 -gt limit ]]; then
		HEX_checkLimit $(($1+1)) $2
	else
		HEX_echoAsHex $1
	fi
}

#output a hex character randomly (no arguments)
function HEX_random() {
	HEX_checkLimit 1 $RANDOM
}




# ---- DELAY ----
delayFound=0
for arg in $@; do

	#catch option 'delay'
	if [[ $arg == '-d' || $arg == '--delay' ]]; then
		delayFound=1
		continue
	fi

	#option catched => get value on next argument
	if [[ $delayFound == 1 ]]; then

		#error cases
		isnbr $arg || {
			echo "randsuite: Invalid delay '$arg' (Number required)."
			exit 1
		}

		#get delay
		delay=$arg
		delayFound=0
	fi
done

#error case
if [[ $delayFound == 1 ]]; then
	echo "randsuite: Expected number after '-d' or '--delay'."
	exit 1
fi

#special case: delay is set to -0 => remove negative sign
if [[ ${delay:0:1} == '-' ]]; then
	delay=${delay:1}
fi






# ---- SEPARATOR ----
separatorFound=0
for arg in $@; do

	#catch option 'separator'
	if [[ $arg == '-s' || $arg == '--separator' ]]; then
		separatorFound=1
		continue
	fi

	#option catched => get value on next argument
	if [[ $separatorFound == 1 ]]; then
		separator=$arg
		separatorFound=0
	fi
done

#error case
if [[ $separatorFound == 1 ]]; then
	echo "randsuite: Expected string after '-s' or '--separator'."
	exit 1
fi






# ---- MAIN ----
case $1 in

	#option 1 : help
	'' | '-h' | '--help')
		echo "Usage : randsuite [option]"
		echo "Display a suite of random characters."
		echo
		echo "Options :"
		echo "  -b, --bin  [nbr]                  : Displays 0 or 1 randomly 'nbr' times."
		echo "                                      (leave 'nbr' empty for infinite loop)"
		echo "             [-d/--delay <delay>]     Delay between generation (default is 0.1s)."
		echo "             [-s/--separator [str]]   Separator between numbers."
		echo "                                      (default is NONE, leave empty for ' ')."
		echo "  -h, --help                        : Show this help message."
		echo "  -H, --hex  [nbr]                  : Displays 0 to f randomly 'nbr' times."
		echo "                                      (leave 'nbr' empty for infinite loop)"
		echo "             [-d/--delay <delay>]     Same thing as '-b'."
		echo "             [-s/--separator [str]]   Same thing as '-b'."
		echo
		echo "Examples :"
		echo "  > randsuite -b"
		echo "  #generates a binary random suite like 0110010010... indefinitely."
		echo
		echo "  > randsuite -H 5 -d 2"
		echo "  #generates 6 hexadecimal random numbers like d61af4 with 2s delay between numbers."
		echo
		echo "  > randsuite -b -d 1"
		echo "  #generates a random suite like 0110010010... indefinitely with 1s between numbers."
		echo
		echo "This command is part of \"Bash Tools\"."
		echo "For more information about \"Bash Tools\", please check :"
		echo "    https://github.com/iasebsil83/Bash_Tools"
		[[ -z $1 ]] && exit 1 || exit 0
	;;

	#option 2 : binary suite
	'-b' | '--bin')

		#no next arguments or it is another option => infinite loop
		if [[ -z $2 || ${2:0:1} == '-' ]]; then
			while [[ 1 ]]; do
				BIN_random
				printf_separator
				sleep $delay
			done

		#iteration number specified => finite loop
		else

			#error case
			isnbr $2 || {
				echo "randsuite: Invalid iteration number '$2' (Integer required)."
				exit 1
			}

			#finite loop
			for randsuite_temp in $(seq $2); do
				BIN_random
				printf_separator
				sleep $delay
			done
		fi
	;;

	#option 3 : hexadecimal suite
	'-H' | '--hex')

		#no next arguments or it is another option => infinite loop
		if [[ -z $2 || ${2:0:1} == '-' ]]; then
			while [[ 1 ]]; do
				HEX_random;
				printf_separator
				sleep $delay;
			done

		#iteration number specified => finite loop
		else

			#error case
			isnbr $2 || {
				echo "randsuite: Invalid iteration number '$2' (Integer required)."
				exit 1
			}

			#finite loop
			for randsuite_temp in $(seq $2); do
				HEX_random
				printf_separator
				sleep $delay
			done
		fi
	;;

	#delay => a numeric base must be set first
	'-d' | '--delay')
		echo "randsuite: A numeric base must be set first."
		exit 1
	;;

	#separator => a numberic base must be set first
	'-s' | '--separator')
		echo "randsuite: A numeric base must be set first."
		exit 1
	;;

	#undefined option
	-*)
		echo "randsuite: Undefined option '$1'."
		exit 1
	;;

	#other => help with exit code 1
	*)
		randsuite
	;;
esac
