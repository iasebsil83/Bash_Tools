#!/bin/bash




# ---- EXECUTION ----

#main
case $1 in

	#help
	'' | '-h' | '--help')
		echo "Usage : keep [option]"
		echo "Reads standard input and output only a selection."
		echo
		echo "Options :"
		echo "  -d, --directories : Keep only existing directories."
		echo "  -e, --exist       : Keep only existing files or directories."
		echo "  -f, --files       : Keep only existing files."
		echo "  -h, --help        : Show this help message."
		echo "  -r, --readable    : Keep only existing user readable files."
		echo "  -t, --type <ext>  : Keep only files with extension '.<ext>'."
		echo "  -w, --writable    : Keep only existing user writable files."
		echo "  -x, --executable  : Keep only existing user executable files."
		echo
		echo "Example :"
		echo "  > ls -a | keep -d"
		echo "  #list all current files & folders but keep only directories."
		echo
		echo "This command is part of \"Bash Tools\"."
		echo "For more information about \"Bash Tools\", please check :"
		echo "    https://github.com/iasebsil83/Bash_Tools"
		[[ -z $1 ]] && exit 1 || exit 0
	;;

	#option 1 : directories only
	'-d' | '--directories')
		input=$(cat)
		for element in ${input[@]}; do
			if [[ -d $element ]]; then
				echo $element
			fi
		done
	;;

	#option 2 : existing only
	'-e' | '--exist')
		input=$(cat)
		for element in ${input[@]}; do
			if [[ -e $element ]]; then
				echo $element
			fi
		done
	;;

	#option 3 : files only
	'-f' | '--files')
		input=$(cat)
		for element in ${input[@]}; do
			if [[ -f $element ]]; then
				echo $element
			fi
		done
	;;

	#option 4 : user readable only
	'-r' | '--readable')
		input=$(cat)
		for element in ${input[@]}; do
			if [[ -r $element ]]; then
				echo $element
			fi
		done
	;;

	#option 5 : user writable only
	'-w' | '--writable')
		input=$(cat)
		for element in ${input[@]}; do
			if [[ -w $element ]]; then
				echo $element
			fi
		done
	;;

	#option 6 : user executable only
	'-x' | '--executable')
		input=$(cat)
		for element in ${input[@]}; do
			if [[ -x $element ]]; then
				echo $element
			fi
		done
	;;

	#option 7 : filter by extension
	'-t' | '--type')

		#check extension
		if [[ -z $2 ]]; then
			echo "keep: No extension given to filter."
			exit 1
		fi

		#filter
		input=$(cat)
		for element in ${input[@]}; do
			if [[ $element == *'.'$2 ]]; then
				echo $element
			fi
		done
	;;

	#undefined option
	-*)
		echo "keep: Undefined option '$1'."
		exit 1
	;;

	#no option => help with exit code
	*)
		keep
	;;
esac
