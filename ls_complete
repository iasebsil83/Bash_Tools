#!/bin/bash



# ---- one column display ----
oneColumn=0
for arg in $@; do

	#catch action 'line'
	if [[ $arg == '-l' || $arg == '--line' ]]; then
		oneColumn=1
	fi
done



# ---- main ----
case $1 in

	#action 1 : help
	'-h' | '--help')
		echo "Usage : ls_complete [action] [path]"
                echo "Exactly the same thing as command 'ls' but with complete path output."
                echo
                echo "Action :"
                echo "  -h, --help : Show this help message."
		echo "  -l, --line : Display only 1 result per line."
                echo
                echo "Example : "
                echo "  > ls_complete ~"
                echo "  #list all current files & folders in $HOME with their full path."
                echo
                echo "This command is part of \"Bash Tools\"."
                echo "For more information about \"Bash Tools\", please check :"
                echo "    https://github.com/iasebsil83/Bash_Tools"
	;;

	#action 2 : 1 result per line activated
	'-l' | '--line')

		#rebuild command excluding the -l/--line found
		newCommand="ls_complete "
		for arg in $@; do
			if [[ $arg != '-l' && $arg != '--line' ]]; then
				newCommand+=$arg' '
			fi
		done
		echo "$($newCommand)"
	;;

	#undefined action
	-*)
		echo "ls_complete: Undefined action '$1'."
		exit 1
	;;

	#action 3 : ls with complete path
	*)
		#check whether there is nothing to show (special case for '-d /*')
		if [[ ! "$(ls $1)" ]]; then
			exit 0
		fi

		#current directory
		if [[ $1 == '' ]]; then
			if [[ $oneColumn == 1 ]]; then
				echo "$(ls -d $PWD/*)"
			else
				ls -d $PWD/*
			fi

		else
			#get both string and char array from $1
			dir_str=$1
			dir_arr=()
			while read -n1 c; do
				dir_arr+=($c)
			done <<< $1

			#remove '/' at the end
			lastIndex=$(( ${#dir_arr[@]} - 1 ))
			if [[ ${dir_arr[$lastIndex]} == '/' ]]; then
				dir_str=${dir_str:0:-1}
			fi

			#full path given (starts by '/')
			if [[ ${dir_str:0:1} == '/' ]]; then
				if [[ $oneColumn == 1 ]]; then
					echo "$(ls -d $dir_str/*)"
				else
					ls -d $dir_str/*
				fi

			#relative path given
			else
				if [[ $oneColumn == 1 ]]; then
					echo "$(ls -d $PWD/$dir_str/*)"
				else
					 ls -d $PWD/$dir_str/*
				fi
			fi
		fi
	;;
esac
