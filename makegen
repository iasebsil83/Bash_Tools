#!/usr/bin/python3




# ---- IMPORTATIONS----

#system
import os
import sys






# ---- CONSTANTS ----

#compilations
EXE_COMPILE       = "gcc -o "
EXE_FLAGS         = " -Wall -O2"
DEP_COMPILE       = "gcc -c -Wall -O2 "
dep_optionalFlags = ""

#temporary files
REMOVE_TEMP_FILES="rm -f *.o"






# ---- ARGUMENTS ----

#no argument => equivalent to 'makegen $PWD/mkconf'
if len(sys.argv) == 1:
	exit( os.system("makegen " + os.getcwd() + "/mkconf") )

#help menu
if sys.argv[1] == '-h' or sys.argv[1] == '--help':
	print("Usage : makegen [option] [file]")
	print("Generate a 'Makefile' from the configuration given by [file].")
	print("If [file] is empty, it will search for a file 'mkconf' in current directory.")
	print()
	print("The configuration file must follow this patern :")
	print("    #lines starting with '#' and empty lines are skipped")
	print()
	print("    exe_name exe_flag1 exe_flag2 ...")
	print("    dep1 header1 header2 ...")
	print("    dep2 header3 header4 ...")
	print("    :dep_flag1 dep_flag2 ... #define new depedency flags")
	print("    dep3 header5 header6 ...")
	print("    :                        #reset dependency flags (set empty flags)")
	print("    dep4 header7 header8 ...")
	print("    ...")
	print()
	print()
	print("That will generate a makefile like :")
	print("    exe_name: dep1.o dep2.o dep3.o dep4.o")
	print("        gcc -o exe_name -Wall -O2 dep1.o dep2.o dep3.o dep4.o exe_flag1 exe_flag2 ...")
	print()
	print("    dep1.o: dep1.c dep1.h header1.h header2.h ...")
	print("        gcc -c -Wall -O2 dep1.c")
	print()
	print("    dep2.o: dep2.c dep2.h header3.h header4.h ...")
	print("        gcc -c -Wall -O2 dep1.c")
	print()
	print("    dep3.o: dep3.c dep3.h header5.h header6.h ...")
	print("        gcc -c -Wall -O2 dep3.c dep_flag1 dep_flag2 ...")
	print()
	print("    dep4.o: dep4.c dep4.h header7.h header8.h ...")
	print("        gcc -c -Wall -O2 dep4.c")
	print()
	print("    ...")
	print()
	print()
	print("NOTE : It is a common use to not create a header file for some source codes")
	print("       (especially the main one) but for the consistency of makegen, it is")
	print("       required that EVERY SOURCE FILE have his own header.")
	print("       Notice that a header can be empty.")
	print()
	print("Options :")
	print("  -h, --help : Show this help message.")
	print("  -a, --auto : Automatically running 'make' after creating the makefile, then removing it.")
	print()
	print("Examples : ")
	print("  > makegen -a")
	print("  #Generate a Makefile from the present 'mkconf' file if existing in current directory.")
	print("  #Directly after having made the Makefile, it will execute a 'make' command")
	print("  #and then remove the generated Makefile.")
	print()
	print("  > makegen my_config.conf")
	print("  #Generate a Makefile from 'my_config.conf'.")
	print()
	print("This command is part of \"Bash Tools\".")
	print("For more information about \"Bash Tools\", please check :")
	print("    https://github.com/iasebsil83/Bash_Tools")
	exit(0)

#auto mode : option placed before
if sys.argv[1] == '-a' or sys.argv[1] == '--auto':
	if len(sys.argv) >= 3:
		exit( os.system("makegen " + sys.argv[2] + " -a") )
	exit( os.system("makegen " + os.getcwd() + "/mkconf -a") )







# ---- CONFIG FILE ----

#get config file
try:
	f = open(sys.argv[1], "r")
	raw_lines = f.read().split('\n')
	f.close()

#error case
except:
	print("makegen: Unable to read config file '" + sys.argv[1] + "'.")
	exit(1)






# ---- MAKEFILE ----

#keep only uncommented lines
lines = []
for l in raw_lines:
	if l != '' and l[0] != '#':
		lines.append(l)

#generator message
makefile_text  = "#Generated by : makegen\n"
makefile_text += "#\n"
makefile_text += "#makegen is part of \"Bash Tools\".\n"
makefile_text += "#For more information about \"Bash Tools\", please check :\n"
makefile_text += "#    https://github.com/iasebsil83/Bash_Tools\n"
makefile_text += "\n"

#for each line
for l in range(len(lines)):
	current = lines[l].split(' ')

	#remove empty elements (multiple spaces)
	new_current = []
	for c in current:
		if c != "":
			new_current.append(c)
	current = new_current

	#no target given
	if len(current) == 0:
		print("makegen: No target given at line "+ str(l) + ".")
		exit(1)



	#1: executable compilation
	if l == 0:

		#line 1 : set target and dependencies
		makefile_text += current[0] + ":"

		#get dependencies object files
		objs = ""
		for d in lines[1:]:
			if d[0] != ':':
				objs += " " + d.split(' ')[0].split('/')[-1] + ".o"
		makefile_text += objs

		#get exe optional flags
		exe_optionalFlags = ""
		for f in current[1:]:
			exe_optionalFlags += f + " "

		#line 2 : compilation command
		makefile_text += "\n\t" + EXE_COMPILE + current[0] + EXE_FLAGS + objs + " " + exe_optionalFlags + "\n"
		makefile_text +=   "\t" + REMOVE_TEMP_FILES + "\n\n"



	#2: dependency flag
	elif current[0][0] == ':':
		current[0] = current[0][1:] #remove ':' prefix

		dep_optionalFlags = ""
		for f in current:
			dep_optionalFlags += f + " "

	#3: dependency compilation
	else:

		#line 1 : set target and dependencies
		makefile_text += current[0].split('/')[-1] + ".o: " + current[0] + ".c " + current[0] + ".h"
		for arg in current[1:]:
			makefile_text += " " + arg + ".h"

		#line 2 : compilation command
		makefile_text += "\n\t" + DEP_COMPILE + current[0] + ".c " + dep_optionalFlags + "\n\n"






# ---- END ----

#create makefile
try:
	f = open("Makefile", "w")
	f.write(makefile_text)
	f.close()

#error case
except:
	print("makegen: Unable to create file 'Makefile'.")
	exit(1)

#option 'auto'
if len(sys.argv) >= 3 and (sys.argv[2] == '-a' or sys.argv[2] == '--auto'):

	#auto make
	error_code = os.system("make")
	if error_code:
		print("makegen: Error(s) occured when running 'Makefile'.")
		exit(error_code)

	#auto remove
	error_code = os.system("rm Makefile")
	if error_code:
		print("makegen: Unable to remove 'Makefile' after executing it.")
		exit(error_code)

	#success in auto mode
	print("Makefile generated, executed, then removed successfully !")
	exit(0)

#end message
print("Makefile generated !")
